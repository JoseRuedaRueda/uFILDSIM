* SINPA code

This code was created as a synthetic INPA, although it was enhanced to have FILDSIM capabilities. The code is written in fortran, although a complete set of python routines to prepare the inputs and process the output is written.
Up to now, these python libraries are distributed together with the ScintillatorSuite (<https://gitlab.mpcdf.mpg.de/ruejo/scintsuite>). They are now under development, as the code is kinda new. Once they are solid, a copy of those routines will be included here

** Installation and documentation
*** Compilation
In orther to compile the code, you should use the version of gfortran included in gcc version 9.3.0 (GCC) [This is the default when you do module load gcc in toki, as of 4/1/2021]. Notice that any GCC between 8 and 10 seems to work.
There are 2 ways of compiling the code:
  - 'make all': It will compile the code in a way that is compatible with all processors, should work from your laptop to tok cluster
  - 'make all_cluster': It will compile it with some optimization flags though for high performance CPU and clusters, using these options it will work much faster in toks (for example) but it will not work in toki

*** Documentation
- All objects and methods are documented such that the user can understand what is going on, although the code is new ans improvement in the documentation will come with new versions
- For examples of how to execute the code and analyze the outputs, see the examples python scripts in the ScintillatorSuite library (to be added here in the future)
- For a manual (more or less complete) with a complete benchmark with FILDSIM see <https://datashare.mpcdf.mpg.de/s/oQJw82fd705OEJ8>

*** Version control
Each release will be denoted by 2 numbers: a.b meaning:
    - b: bug fixed and improved comments and documentation. Some new capabilities could be added (see changelog). The higher the number, the better.
    - a: indicate major changes in the code, versions with different 'a' may be not compatible, not recommended update to a higher 'a' version close to a conference

*** Branches
- master: Stable branch, things should work, may be a delay including new features
- dev-branch: developers branch, may have some small bugs or not fully developed features. Include the latest features, not recommended for general public
- 'tmp'-branch: linked to specific commits to include new features. Do not use these branches except you are the developer in charge of the new feature. Unicorns can appear

*** Note for developers
- Before changing anything in a module open a issue in GitLab to start a discussion

*** Issues and new implementations
If a new implementation is required, open the appropriate issue in the GIT and link it to the milestone if it corresponds (if possible). The following tags are available:

- Documentation: improve the documentation of a given section.
- Feature request: request to implement a new feature in the code.
- Minor mod.: request to implement minor modifications in the code.
- Enhancement: modify the implementation of a given feature to improve the efficiency or make easier some processing.
- Discussion: a forum to discuss ideas of implementation.
- Bug: minor error found in the code. To be corrected at the earliest convenience.
- Major error: an important error has to be solved in the code as soon as possible.
- Minor priority: Label for maintainer, indicates that the request has low priority in the ToDo list

** Machine names
All devices are identified by three letters:
- 'AUG': ASDEX Upgrade

** Useful links
- FILDSIM code: <https://gitlab.mpcdf.mpg.de/jgq/FILDSIM.git>
- INPASIM code: <https://gitlab.mpcdf.mpg.de/ruejo/inpasim.git>
- i-HIBPSIM code: <https://gitlab.mpcdf.mpg.de/poyo/ihibpsim>
- ScintillatorSuite library: <https://gitlab.mpcdf.mpg.de/ruejo/scintsuite>
